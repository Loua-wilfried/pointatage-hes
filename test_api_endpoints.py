#!/usr/bin/env python
"""
Script de test pour les endpoints API des agences et r√¥les
"""
import os
import django
import json

# Configuration Django
os.environ.setdefault('DJANGO_SETTINGS_MODULE', 'hesfinance360.settings')
django.setup()

from agences.models import Agence
from roles_permissions.models import Role
from rh.serializers import AgenceSerializer, RoleSerializer
from rh.api import AgenceViewSet, RoleViewSet
from django.test import RequestFactory
from django.contrib.auth.models import AnonymousUser

def test_agences_api():
    """Test de l'API des agences"""
    print("=== TEST API AGENCES ===")
    
    # Cr√©er une requ√™te factory
    factory = RequestFactory()
    request = factory.get('/api/agences/')
    request.user = AnonymousUser()
    
    # Tester le ViewSet
    viewset = AgenceViewSet()
    viewset.request = request
    
    # Obtenir le queryset
    queryset = viewset.get_queryset()
    print(f"Nombre d'agences actives: {queryset.count()}")
    
    # Tester la s√©rialisation
    agences = queryset[:5]  # Prendre les 5 premi√®res
    serializer = AgenceSerializer(agences, many=True)
    data = serializer.data
    
    print("Donn√©es s√©rialis√©es des agences:")
    for agence in data:
        print(f"  - {agence}")
    
    return data

def test_roles_api():
    """Test de l'API des r√¥les"""
    print("\n=== TEST API R√îLES ===")
    
    # Cr√©er une requ√™te factory
    factory = RequestFactory()
    request = factory.get('/api/roles/')
    request.user = AnonymousUser()
    
    # Tester le ViewSet
    viewset = RoleViewSet()
    viewset.request = request
    
    # Obtenir le queryset
    queryset = viewset.queryset
    print(f"Nombre de r√¥les: {queryset.count()}")
    
    # Tester la s√©rialisation
    roles = queryset[:5]  # Prendre les 5 premiers
    serializer = RoleSerializer(roles, many=True)
    data = serializer.data
    
    print("Donn√©es s√©rialis√©es des r√¥les:")
    for role in data:
        print(f"  - {role}")
    
    return data

def test_json_format():
    """Test du format JSON pour l'app mobile"""
    print("\n=== TEST FORMAT JSON MOBILE ===")
    
    agences_data = test_agences_api()
    roles_data = test_roles_api()
    
    # V√©rifier le format attendu par l'app mobile
    print("\nFormat JSON pour l'app mobile:")
    print("Agences:", json.dumps(agences_data, indent=2, ensure_ascii=False))
    print("R√¥les:", json.dumps(roles_data, indent=2, ensure_ascii=False))
    
    return {
        'agences': agences_data,
        'roles': roles_data
    }

if __name__ == '__main__':
    try:
        # Ex√©cuter tous les tests
        result = test_json_format()
        
        print("\n=== R√âSUM√â DES TESTS ===")
        print("‚úÖ Mod√®les Agence et Role: OK")
        print("‚úÖ Serializers AgenceSerializer et RoleSerializer: OK")
        print("‚úÖ ViewSets AgenceViewSet et RoleViewSet: OK")
        print("‚úÖ Format JSON pour mobile: OK")
        
        print(f"\nüìä STATISTIQUES:")
        print(f"   - {len(result['agences'])} agences disponibles")
        print(f"   - {len(result['roles'])} r√¥les disponibles")
        
        print("\nüéØ ENDPOINTS PR√äTS:")
        print("   - GET /api/agences/ ‚úÖ")
        print("   - GET /api/roles/ ‚úÖ")
        
    except Exception as e:
        print(f"‚ùå ERREUR: {e}")
        import traceback
        traceback.print_exc()
